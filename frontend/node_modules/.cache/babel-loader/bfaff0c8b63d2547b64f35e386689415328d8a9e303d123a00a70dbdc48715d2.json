{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8000';\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// リクエストインターセプター\napiClient.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// レスポンスインターセプター\napiClient.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // 認証エラーの場合、ログインページにリダイレクト\n    localStorage.removeItem('token');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// レコメンデーション生成\nexport const getRecommendations = async userData => {\n  try {\n    console.log('Sending recommendation request with data:', userData);\n    const response = await apiClient.post('/api/recommendations/', userData);\n    console.log('Received recommendation response:', response.data);\n    if (!response.data || !Array.isArray(response.data)) {\n      throw new Error('Invalid response format from server');\n    }\n    return response.data;\n  } catch (error) {\n    console.error('レコメンデーション生成エラー:', error);\n    throw error;\n  }\n};\n\n// レコメンデーション作成\nexport const createRecommendation = async data => {\n  try {\n    console.log('Creating recommendation with data:', data);\n    const response = await apiClient.post('/api/v1/recommendations/', data);\n    console.log('Received create recommendation response:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('レコメンデーション作成エラー:', error);\n    if (error.response) {\n      const {\n        status,\n        data\n      } = error.response;\n      console.error('エラーの詳細:', data);\n\n      // バックエンドからのエラーメッセージを処理\n      if (data.detail) {\n        if (Array.isArray(data.detail)) {\n          // バリデーションエラーの場合\n          const errorMessages = data.detail.map(err => {\n            const field = err.loc[err.loc.length - 1];\n            return `${field}: ${err.msg}`;\n          });\n          throw new Error(errorMessages.join('\\n'));\n        } else {\n          // その他のエラーの場合\n          throw new Error(data.detail);\n        }\n      }\n\n      // ステータスコードに基づくエラーメッセージ\n      switch (status) {\n        case 422:\n          throw new Error('入力データが不正です。入力内容を確認してください。');\n        case 500:\n          throw new Error('サーバーエラーが発生しました。しばらく経ってから再度お試しください。');\n        default:\n          throw new Error(`エラーが発生しました（ステータスコード: ${status}）`);\n      }\n    }\n    throw new Error('ネットワークエラーが発生しました。インターネット接続を確認してください。');\n  }\n};\n\n// レコメンデーション履歴取得\nexport const getRecommendationHistory = async () => {\n  try {\n    const response = await apiClient.get('/api/recommendations/history/');\n    return response.data;\n  } catch (error) {\n    console.error('履歴取得エラー:', error);\n    throw error;\n  }\n};\n\n// フィードバック送信\nexport const submitFeedback = async (recommendationId, feedback) => {\n  try {\n    const response = await apiClient.post(`/api/recommendations/${recommendationId}/feedback/`, {\n      feedback\n    });\n    return response.data;\n  } catch (error) {\n    console.error('フィードバック送信エラー:', error);\n    throw error;\n  }\n};\n\n// 14本クラブセットのレコメンド（複数セット・マッチ度順）\nexport const getClubSetRecommendations = async userData => {\n  try {\n    const response = await apiClient.post('/api/v1/recommendations/sets', userData);\n    return response.data;\n  } catch (error) {\n    console.error('クラブセットレコメンド取得エラー:', error);\n    throw error;\n  }\n};\nexport default apiClient;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","apiClient","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","getRecommendations","userData","console","log","post","data","Array","isArray","Error","createRecommendation","detail","errorMessages","map","err","field","loc","length","msg","join","getRecommendationHistory","get","submitFeedback","recommendationId","feedback","getClubSetRecommendations"],"sources":["C:/Users/takem/OneDrive/01_Work/05_ai-golf/frontend/src/api/client.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8000';\n\nconst apiClient = axios.create({\n    baseURL: API_BASE_URL,\n    headers: {\n        'Content-Type': 'application/json',\n    },\n});\n\n// リクエストインターセプター\napiClient.interceptors.request.use(\n    (config) => {\n        const token = localStorage.getItem('token');\n        if (token) {\n            config.headers.Authorization = `Bearer ${token}`;\n        }\n        return config;\n    },\n    (error) => {\n        return Promise.reject(error);\n    }\n);\n\n// レスポンスインターセプター\napiClient.interceptors.response.use(\n    (response) => response,\n    (error) => {\n        if (error.response?.status === 401) {\n            // 認証エラーの場合、ログインページにリダイレクト\n            localStorage.removeItem('token');\n            window.location.href = '/login';\n        }\n        return Promise.reject(error);\n    }\n);\n\n// レコメンデーション生成\nexport const getRecommendations = async (userData) => {\n  try {\n    console.log('Sending recommendation request with data:', userData);\n    const response = await apiClient.post('/api/recommendations/', userData);\n    console.log('Received recommendation response:', response.data);\n    if (!response.data || !Array.isArray(response.data)) {\n      throw new Error('Invalid response format from server');\n    }\n    return response.data;\n  } catch (error) {\n    console.error('レコメンデーション生成エラー:', error);\n    throw error;\n  }\n};\n\n// レコメンデーション作成\nexport const createRecommendation = async (data) => {\n  try {\n    console.log('Creating recommendation with data:', data);\n    const response = await apiClient.post('/api/v1/recommendations/', data);\n    console.log('Received create recommendation response:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('レコメンデーション作成エラー:', error);\n    \n    if (error.response) {\n      const { status, data } = error.response;\n      console.error('エラーの詳細:', data);\n      \n      // バックエンドからのエラーメッセージを処理\n      if (data.detail) {\n        if (Array.isArray(data.detail)) {\n          // バリデーションエラーの場合\n          const errorMessages = data.detail.map(err => {\n            const field = err.loc[err.loc.length - 1];\n            return `${field}: ${err.msg}`;\n          });\n          throw new Error(errorMessages.join('\\n'));\n        } else {\n          // その他のエラーの場合\n          throw new Error(data.detail);\n        }\n      }\n      \n      // ステータスコードに基づくエラーメッセージ\n      switch (status) {\n        case 422:\n          throw new Error('入力データが不正です。入力内容を確認してください。');\n        case 500:\n          throw new Error('サーバーエラーが発生しました。しばらく経ってから再度お試しください。');\n        default:\n          throw new Error(`エラーが発生しました（ステータスコード: ${status}）`);\n      }\n    }\n    \n    throw new Error('ネットワークエラーが発生しました。インターネット接続を確認してください。');\n  }\n};\n\n// レコメンデーション履歴取得\nexport const getRecommendationHistory = async () => {\n  try {\n    const response = await apiClient.get('/api/recommendations/history/');\n    return response.data;\n  } catch (error) {\n    console.error('履歴取得エラー:', error);\n    throw error;\n  }\n};\n\n// フィードバック送信\nexport const submitFeedback = async (recommendationId, feedback) => {\n  try {\n    const response = await apiClient.post(`/api/recommendations/${recommendationId}/feedback/`, { feedback });\n    return response.data;\n  } catch (error) {\n    console.error('フィードバック送信エラー:', error);\n    throw error;\n  }\n};\n\n// 14本クラブセットのレコメンド（複数セット・マッチ度順）\nexport const getClubSetRecommendations = async (userData) => {\n  try {\n    const response = await apiClient.post('/api/v1/recommendations/sets', userData);\n    return response.data;\n  } catch (error) {\n    console.error('クラブセットレコメンド取得エラー:', error);\n    throw error;\n  }\n};\n\nexport default apiClient; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB,IAAI,uBAAuB;AAElF,MAAMC,SAAS,GAAGL,KAAK,CAACM,MAAM,CAAC;EAC3BC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE;IACL,cAAc,EAAE;EACpB;AACJ,CAAC,CAAC;;AAEF;AACAH,SAAS,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAC7BC,MAAM,IAAK;EACR,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACPD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EACpD;EACA,OAAOD,MAAM;AACjB,CAAC,EACAK,KAAK,IAAK;EACP,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CACJ,CAAC;;AAED;AACAZ,SAAS,CAACI,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC9BS,QAAQ,IAAKA,QAAQ,EACrBH,KAAK,IAAK;EAAA,IAAAI,eAAA;EACP,IAAI,EAAAA,eAAA,GAAAJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;IAChC;IACAR,YAAY,CAACS,UAAU,CAAC,OAAO,CAAC;IAChCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;EACnC;EACA,OAAOR,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CACJ,CAAC;;AAED;AACA,OAAO,MAAMU,kBAAkB,GAAG,MAAOC,QAAQ,IAAK;EACpD,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,2CAA2C,EAAEF,QAAQ,CAAC;IAClE,MAAMR,QAAQ,GAAG,MAAMf,SAAS,CAAC0B,IAAI,CAAC,uBAAuB,EAAEH,QAAQ,CAAC;IACxEC,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAEV,QAAQ,CAACY,IAAI,CAAC;IAC/D,IAAI,CAACZ,QAAQ,CAACY,IAAI,IAAI,CAACC,KAAK,CAACC,OAAO,CAACd,QAAQ,CAACY,IAAI,CAAC,EAAE;MACnD,MAAM,IAAIG,KAAK,CAAC,qCAAqC,CAAC;IACxD;IACA,OAAOf,QAAQ,CAACY,IAAI;EACtB,CAAC,CAAC,OAAOf,KAAK,EAAE;IACdY,OAAO,CAACZ,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;IACvC,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMmB,oBAAoB,GAAG,MAAOJ,IAAI,IAAK;EAClD,IAAI;IACFH,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEE,IAAI,CAAC;IACvD,MAAMZ,QAAQ,GAAG,MAAMf,SAAS,CAAC0B,IAAI,CAAC,0BAA0B,EAAEC,IAAI,CAAC;IACvEH,OAAO,CAACC,GAAG,CAAC,0CAA0C,EAAEV,QAAQ,CAACY,IAAI,CAAC;IACtE,OAAOZ,QAAQ,CAACY,IAAI;EACtB,CAAC,CAAC,OAAOf,KAAK,EAAE;IACdY,OAAO,CAACZ,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;IAEvC,IAAIA,KAAK,CAACG,QAAQ,EAAE;MAClB,MAAM;QAAEE,MAAM;QAAEU;MAAK,CAAC,GAAGf,KAAK,CAACG,QAAQ;MACvCS,OAAO,CAACZ,KAAK,CAAC,SAAS,EAAEe,IAAI,CAAC;;MAE9B;MACA,IAAIA,IAAI,CAACK,MAAM,EAAE;QACf,IAAIJ,KAAK,CAACC,OAAO,CAACF,IAAI,CAACK,MAAM,CAAC,EAAE;UAC9B;UACA,MAAMC,aAAa,GAAGN,IAAI,CAACK,MAAM,CAACE,GAAG,CAACC,GAAG,IAAI;YAC3C,MAAMC,KAAK,GAAGD,GAAG,CAACE,GAAG,CAACF,GAAG,CAACE,GAAG,CAACC,MAAM,GAAG,CAAC,CAAC;YACzC,OAAO,GAAGF,KAAK,KAAKD,GAAG,CAACI,GAAG,EAAE;UAC/B,CAAC,CAAC;UACF,MAAM,IAAIT,KAAK,CAACG,aAAa,CAACO,IAAI,CAAC,IAAI,CAAC,CAAC;QAC3C,CAAC,MAAM;UACL;UACA,MAAM,IAAIV,KAAK,CAACH,IAAI,CAACK,MAAM,CAAC;QAC9B;MACF;;MAEA;MACA,QAAQf,MAAM;QACZ,KAAK,GAAG;UACN,MAAM,IAAIa,KAAK,CAAC,2BAA2B,CAAC;QAC9C,KAAK,GAAG;UACN,MAAM,IAAIA,KAAK,CAAC,oCAAoC,CAAC;QACvD;UACE,MAAM,IAAIA,KAAK,CAAC,wBAAwBb,MAAM,GAAG,CAAC;MACtD;IACF;IAEA,MAAM,IAAIa,KAAK,CAAC,sCAAsC,CAAC;EACzD;AACF,CAAC;;AAED;AACA,OAAO,MAAMW,wBAAwB,GAAG,MAAAA,CAAA,KAAY;EAClD,IAAI;IACF,MAAM1B,QAAQ,GAAG,MAAMf,SAAS,CAAC0C,GAAG,CAAC,+BAA+B,CAAC;IACrE,OAAO3B,QAAQ,CAACY,IAAI;EACtB,CAAC,CAAC,OAAOf,KAAK,EAAE;IACdY,OAAO,CAACZ,KAAK,CAAC,UAAU,EAAEA,KAAK,CAAC;IAChC,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAM+B,cAAc,GAAG,MAAAA,CAAOC,gBAAgB,EAAEC,QAAQ,KAAK;EAClE,IAAI;IACF,MAAM9B,QAAQ,GAAG,MAAMf,SAAS,CAAC0B,IAAI,CAAC,wBAAwBkB,gBAAgB,YAAY,EAAE;MAAEC;IAAS,CAAC,CAAC;IACzG,OAAO9B,QAAQ,CAACY,IAAI;EACtB,CAAC,CAAC,OAAOf,KAAK,EAAE;IACdY,OAAO,CAACZ,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;IACrC,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMkC,yBAAyB,GAAG,MAAOvB,QAAQ,IAAK;EAC3D,IAAI;IACF,MAAMR,QAAQ,GAAG,MAAMf,SAAS,CAAC0B,IAAI,CAAC,8BAA8B,EAAEH,QAAQ,CAAC;IAC/E,OAAOR,QAAQ,CAACY,IAAI;EACtB,CAAC,CAAC,OAAOf,KAAK,EAAE;IACdY,OAAO,CAACZ,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;IACzC,MAAMA,KAAK;EACb;AACF,CAAC;AAED,eAAeZ,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}