{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL;\nconst client = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  },\n  withCredentials: false\n});\n\n// リクエストインターセプター\nclient.interceptors.request.use(config => {\n  // リクエスト送信前の処理\n  console.log('Sending request to:', config.url);\n  return config;\n}, error => {\n  console.error('Request error:', error);\n  return Promise.reject(error);\n});\n\n// レスポンスインターセプター\nclient.interceptors.response.use(response => {\n  // レスポンス受信時の処理\n  console.log('Received response from:', response.config.url);\n  return response;\n}, error => {\n  // エラーハンドリング\n  if (error.response) {\n    // サーバーからのレスポンスがある場合\n    console.error('API Error:', {\n      status: error.response.status,\n      data: error.response.data,\n      headers: error.response.headers\n    });\n  } else if (error.request) {\n    // リクエストは送信されたがレスポンスがない場合\n    console.error('No response received:', error.request);\n  } else {\n    // リクエストの設定中にエラーが発生した場合\n    console.error('Request setup error:', error.message);\n  }\n  return Promise.reject(error);\n});\n\n// レコメンデーション生成\nexport const getRecommendations = async userData => {\n  try {\n    console.log('Sending recommendation request with data:', userData);\n    const response = await client.post('/api/recommendations/', userData);\n    console.log('Received recommendation response:', response.data);\n    if (!response.data || !Array.isArray(response.data)) {\n      throw new Error('Invalid response format from server');\n    }\n    return response.data;\n  } catch (error) {\n    console.error('レコメンデーション生成エラー:', error);\n    throw error;\n  }\n};\n\n// レコメンデーション作成\nexport const createRecommendation = async recommendationData => {\n  try {\n    console.log('Creating recommendation with data:', recommendationData);\n    const response = await client.post('/api/recommendations/create/', recommendationData);\n    console.log('Received create recommendation response:', response.data);\n    return response;\n  } catch (error) {\n    console.error('レコメンデーション作成エラー:', error);\n    throw error;\n  }\n};\n\n// レコメンデーション履歴取得\nexport const getRecommendationHistory = async () => {\n  try {\n    const response = await client.get('/api/recommendations/history/');\n    return response.data;\n  } catch (error) {\n    console.error('履歴取得エラー:', error);\n    throw error;\n  }\n};\n\n// フィードバック送信\nexport const submitFeedback = async (recommendationId, feedback) => {\n  try {\n    const response = await client.post(`/api/recommendations/${recommendationId}/feedback/`, {\n      feedback\n    });\n    return response.data;\n  } catch (error) {\n    console.error('フィードバック送信エラー:', error);\n    throw error;\n  }\n};\nexport const api = {\n  getRecommendations,\n  createRecommendation,\n  getRecommendationHistory,\n  submitFeedback\n};\nexport default client;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","client","create","baseURL","timeout","headers","withCredentials","interceptors","request","use","config","console","log","url","error","Promise","reject","response","status","data","message","getRecommendations","userData","post","Array","isArray","Error","createRecommendation","recommendationData","getRecommendationHistory","get","submitFeedback","recommendationId","feedback","api"],"sources":["C:/Users/takem/OneDrive/01_Work/05_ai-golf/frontend/src/api/client.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL;\n\nconst client = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  },\n  withCredentials: false\n});\n\n// リクエストインターセプター\nclient.interceptors.request.use(\n  config => {\n    // リクエスト送信前の処理\n    console.log('Sending request to:', config.url);\n    return config;\n  },\n  error => {\n    console.error('Request error:', error);\n    return Promise.reject(error);\n  }\n);\n\n// レスポンスインターセプター\nclient.interceptors.response.use(\n  response => {\n    // レスポンス受信時の処理\n    console.log('Received response from:', response.config.url);\n    return response;\n  },\n  error => {\n    // エラーハンドリング\n    if (error.response) {\n      // サーバーからのレスポンスがある場合\n      console.error('API Error:', {\n        status: error.response.status,\n        data: error.response.data,\n        headers: error.response.headers\n      });\n    } else if (error.request) {\n      // リクエストは送信されたがレスポンスがない場合\n      console.error('No response received:', error.request);\n    } else {\n      // リクエストの設定中にエラーが発生した場合\n      console.error('Request setup error:', error.message);\n    }\n    return Promise.reject(error);\n  }\n);\n\n// レコメンデーション生成\nexport const getRecommendations = async (userData) => {\n  try {\n    console.log('Sending recommendation request with data:', userData);\n    const response = await client.post('/api/recommendations/', userData);\n    console.log('Received recommendation response:', response.data);\n    if (!response.data || !Array.isArray(response.data)) {\n      throw new Error('Invalid response format from server');\n    }\n    return response.data;\n  } catch (error) {\n    console.error('レコメンデーション生成エラー:', error);\n    throw error;\n  }\n};\n\n// レコメンデーション作成\nexport const createRecommendation = async (recommendationData) => {\n  try {\n    console.log('Creating recommendation with data:', recommendationData);\n    const response = await client.post('/api/recommendations/create/', recommendationData);\n    console.log('Received create recommendation response:', response.data);\n    return response;\n  } catch (error) {\n    console.error('レコメンデーション作成エラー:', error);\n    throw error;\n  }\n};\n\n// レコメンデーション履歴取得\nexport const getRecommendationHistory = async () => {\n  try {\n    const response = await client.get('/api/recommendations/history/');\n    return response.data;\n  } catch (error) {\n    console.error('履歴取得エラー:', error);\n    throw error;\n  }\n};\n\n// フィードバック送信\nexport const submitFeedback = async (recommendationId, feedback) => {\n  try {\n    const response = await client.post(`/api/recommendations/${recommendationId}/feedback/`, { feedback });\n    return response.data;\n  } catch (error) {\n    console.error('フィードバック送信エラー:', error);\n    throw error;\n  }\n};\n\nexport const api = {\n  getRecommendations,\n  createRecommendation,\n  getRecommendationHistory,\n  submitFeedback\n};\n\nexport default client; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}